# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

import asyncio 
from database import Db, db
from script import Script
from pyrogram import Client, filters
from .test import get_configs, update_configs, CLIENT, parse_buttons
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from .db import connect_user_db

CLIENT = CLIENT()

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

@Client.on_message(filters.command('settings'))
async def settings(client, message):
   await message.reply_text(
     "<b>H·¥á Ä·¥á Is T ú·¥á S·¥á·¥õ·¥õ…™…¥…¢s P·¥Ä…¥·¥á ü‚öô\n\n·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s ·¥Äs  è·¥è·¥ú Ä ·¥°…™s ú üëá</b>",
     reply_markup=main_buttons()
     )

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

@Client.on_callback_query(filters.regex(r'^settings'))
async def settings_query(bot, query):
  user_id = query.from_user.id
  i, type = query.data.split("#")
  buttons = [[InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', callback_data="settings#main")]]
  if type=="main":
     await query.message.edit_text(
       "<b>H·¥á Ä·¥á Is T ú·¥á S·¥á·¥õ·¥õ…™…¥…¢s P·¥Ä…¥·¥á ü‚öô\n\n·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä s·¥á·¥õ·¥õ…™…¥…¢s ·¥Äs  è·¥è·¥ú Ä ·¥°…™s ú üëá</b>",
       reply_markup=main_buttons())
  elif type=="extra":
       await query.message.edit_text(
         "<b>H·¥á Ä·¥á Is T ú·¥á Ex·¥õ Ä·¥Ä S·¥á·¥õ·¥õ…™…¥…¢s P·¥Ä…¥·¥á ü‚öô</b>",
         reply_markup=extra_buttons())
  elif type=="bots":
     buttons = [] 
     _bot = await db.get_bot(user_id)
     usr_bot = await db.get_userbot(user_id)
     if _bot is not None:
        buttons.append([InlineKeyboardButton(_bot['name'],
                         callback_data=f"settings#editbot")])
     else:
        buttons.append([InlineKeyboardButton('‚úö ·¥Ä·¥Ö·¥Ö  ô·¥è·¥õ ‚úö', 
                         callback_data="settings#addbot")])
     if usr_bot is not None:
        buttons.append([InlineKeyboardButton(usr_bot['name'],
                         callback_data=f"settings#edituserbot")])
     else:
        buttons.append([InlineKeyboardButton('‚úö ·¥Ä·¥Ö·¥Ö ·¥ús·¥á Ä  ô·¥è·¥õ ‚úö', 
                         callback_data="settings#adduserbot")])
     buttons.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 
                      callback_data="settings#main")])
     await query.message.edit_text(
       "<b><u>My Bots</b></u>\n\n<b> è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä  ô·¥è·¥õs …™…¥  ú·¥á Ä·¥á</b>",
       reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="addbot":
     await query.message.delete()
     bot = await CLIENT.add_bot(bot, query)
     if bot != True: return
     await query.message.reply_text(
        "<b>bot token successfully added to db</b>",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="adduserbot":
     await query.message.delete()
     user = await CLIENT.add_session(bot, query)
     if user != True: return
     await query.message.reply_text(
        "<b>session successfully added to db</b>",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="channels":
     buttons = []
     channels = await db.get_user_channels(user_id)
     for channel in channels:
        buttons.append([InlineKeyboardButton(f"{channel['title']}",
                         callback_data=f"settings#editchannels_{channel['chat_id']}")])
     buttons.append([InlineKeyboardButton('‚úö ·¥Ä·¥Ö·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚úö', 
                      callback_data="settings#addchannel")])
     buttons.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 
                      callback_data="settings#main")])
     await query.message.edit_text( 
       "<b><u>M è C ú·¥Ä…¥…¥·¥á üs</b></u>\n\n<b> è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä ·¥õ·¥Ä Ä…¢·¥á·¥õ ·¥Ñ ú·¥Ä·¥õÍú± …™…¥  ú·¥á Ä·¥á</b>",
       reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="addchannel":  
     await query.message.delete()
     chat_ids = await bot.ask(chat_id=query.from_user.id, text="<b>‚ù™ SET TARGET CHAT ‚ù´\n\nÍú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á Íú∞ Ä·¥è·¥ç  è·¥è·¥ú Ä ·¥õ·¥Ä Ä…¢·¥á·¥õ ·¥Ñ ú·¥Ä·¥õ\n/cancel - cancel this process</b>")
     if chat_ids.text=="/cancel":
        return await chat_ids.reply_text(
                  "<b>process canceled</b>",
                  reply_markup=InlineKeyboardMarkup(buttons))
     elif not chat_ids.forward_date:
        return await chat_ids.reply("**T ú…™s …™s …¥·¥è·¥õ ·¥Ä Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ‚ö†Ô∏è**")
     else:
        chat_id = chat_ids.forward_from_chat.id
        title = chat_ids.forward_from_chat.title
        username = chat_ids.forward_from_chat.username
        username = "@" + username if username else "private"
     chat = await db.add_channel(user_id, chat_id, title, username)
     await query.message.reply_text(
        "<b>Successfully updated</b>" if chat else "<b>T ú…™s ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö</b>",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="editbot": 
     bot = await db.get_bot(user_id)
     TEXT = Script.BOT_DETAILS if bot['is_bot'] else Script.USER_DETAILS
     buttons = [[InlineKeyboardButton('‚ùå  Ä·¥á·¥ç·¥è·¥†·¥á ‚ùå', callback_data=f"settings#removebot")
               ],
               [InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', callback_data="settings#bots")]]
     await query.message.edit_text(
        TEXT.format(bot['name'], bot['id'], bot['username']),
        reply_markup=InlineKeyboardMarkup(buttons))
     
  elif type=="edituserbot": 
     bot = await db.get_userbot(user_id)
     TEXT = Script.USER_DETAILS
     buttons = [[InlineKeyboardButton('‚ùå  Ä·¥á·¥ç·¥è·¥†·¥á ‚ùå', callback_data=f"settings#removeuserbot")
               ],
               [InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', callback_data="settings#bots")]]
     await query.message.edit_text(
        TEXT.format(bot['name'], bot['id'], bot['username']),
        reply_markup=InlineKeyboardMarkup(buttons))
     
  elif type=="removebot":
     await db.remove_bot(user_id)
     await query.message.edit_text(
        "<b>successfully updated</b>",
        reply_markup=InlineKeyboardMarkup(buttons))
     
  elif type=="removeuserbot":
     await db.remove_userbot(user_id)
     await query.message.edit_text(
        "<b>successfully updated</b>",
        reply_markup=InlineKeyboardMarkup(buttons))
     
  elif type.startswith("editchannels"): 
     chat_id = type.split('_')[1]
     chat = await db.get_channel_details(user_id, chat_id)
     buttons = [[InlineKeyboardButton('‚ùå  Ä·¥á·¥ç·¥è·¥†·¥á ‚ùå', callback_data=f"settings#removechannel_{chat_id}")
               ],
               [InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', callback_data="settings#channels")]]
     await query.message.edit_text(
        f"<b><u>üìÑ C ú·¥Ä…¥…¥·¥á ü D·¥á·¥õ·¥Ä…™ üs</b></u>\n\n<b>- T…™·¥õ ü·¥á:</b> <code>{chat['title']}</code>\n<b>- C ú·¥Ä…¥…¥·¥á ü ID: </b> <code>{chat['chat_id']}</code>\n<b>- Us·¥á Ä…¥·¥Ä·¥ç·¥á :</b> {chat['username']}",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type.startswith("removechannel"):
     chat_id = type.split('_')[1]
     await db.remove_channel(user_id, chat_id)
     await query.message.edit_text(
        "<b>successfully updated</b>",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="caption":
     buttons = []
     data = await get_configs(user_id)
     caption = data['caption']
     if caption is None:
        buttons.append([InlineKeyboardButton('‚úö ·¥Ä·¥Ö·¥Ö ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ ‚úö', 
                      callback_data="settings#addcaption")])
     else:
        buttons.append([InlineKeyboardButton('See Caption', 
                      callback_data="settings#seecaption")])
        buttons[-1].append(InlineKeyboardButton('üóëÔ∏è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ üóëÔ∏è', 
                      callback_data="settings#deletecaption"))
     buttons.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 
                      callback_data="settings#main")])
     await query.message.edit_text(
        "<b><u>C·¥ús·¥õ·¥è·¥ç C·¥Ä·¥ò·¥õ…™·¥è…¥</b></u>\n\n<b> è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥õ ·¥Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ ·¥õ·¥è ·¥†…™·¥Ö·¥á·¥èÍú± ·¥Ä…¥·¥Ö ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õs. …¥·¥è Ä·¥ç·¥Ä ü ü è ·¥úÍú±·¥á …™·¥õÍú± ·¥Ö·¥áÍú∞·¥Ä·¥ú ü·¥õ ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥.</b>\n\n<b><u>A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á F…™ ü ü…™…¥…¢s:</b></u>\n- <code>{filename}</code> : F…™ ü·¥á …¥·¥Ä·¥ç·¥á \n- <code>{size}</code> : F…™ ü·¥á s…™·¥¢·¥á\n- <code>{caption}</code> : D·¥áÍú∞·¥Ä·¥ú ü·¥õ ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="seecaption":   
     data = await get_configs(user_id)
     buttons = [[InlineKeyboardButton('üñãÔ∏è E·¥Ö…™·¥õ ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥', 
                  callback_data="settings#addcaption")
               ],[
               InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 
                 callback_data="settings#caption")]]
     await query.message.edit_text(
        f"<b><u>Y·¥è·¥ú Ä C·¥ús·¥õ·¥è·¥ç C·¥Ä·¥ò·¥õ…™·¥è…¥</b></u>\n\n<code>{data['caption']}</code>",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="deletecaption":
     await update_configs(user_id, 'caption', None)
     await query.message.edit_text(
        "<b>successfully updated</b>",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="addcaption":
     await query.message.delete()
     caption = await bot.ask(query.message.chat.id, "s·¥á…¥·¥Ö  è·¥è·¥ú Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥\n/cancel - <code>·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú…™s ·¥ò Ä·¥è·¥Ñ·¥áss</code>")
     if caption.text=="/cancel":
        return await caption.reply_text(
                  "<b>process canceled !</b>",
                  reply_markup=InlineKeyboardMarkup(buttons))
     try:
         caption.text.format(filename='', size='', caption='')
     except KeyError as e:
         return await caption.reply_text(
            f"<b>·¥° Ä·¥è…¥…¢ Íú∞…™ ü ü…™…¥…¢ {e} ·¥ús·¥á·¥Ö …™…¥  è·¥è·¥ú Ä ·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥. ·¥Ñ ú·¥Ä…¥…¢·¥á …™·¥õ</b>",
            reply_markup=InlineKeyboardMarkup(buttons))
     await update_configs(user_id, 'caption', caption.text)
     await caption.reply_text(
        "<b>s·¥ú·¥Ñ·¥Ñ·¥ásÍú∞·¥ú ü ü è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ‚úÖ</b>",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="button":
     buttons = []
     button = (await get_configs(user_id))['button']
     if button is None:
        buttons.append([InlineKeyboardButton('‚úö ·¥Ä·¥Ö·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥ ‚úö', 
                      callback_data="settings#addbutton")])
     else:
        buttons.append([InlineKeyboardButton('üëÄ s·¥á·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ üëÄ', 
                      callback_data="settings#seebutton")])
        buttons[-1].append(InlineKeyboardButton('üóëÔ∏è  Ä·¥á·¥ç·¥è·¥†·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ üóëÔ∏è', 
                      callback_data="settings#deletebutton"))
     buttons.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 
                      callback_data="settings#main")])
     await query.message.edit_text(
        "<b><u>CUSTOM BUTTON</b></u>\n\n<b> è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥õ ·¥Ä…¥ …™…¥ ü…™…¥·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú±.</b>\n\n<b><u>FORMAT:</b></u>\n`[Forward bot][buttonurl:https://t.me/mychannelurl]`\n",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="addbutton":
     await query.message.delete()
     ask = await bot.ask(user_id, text="**S·¥á…¥·¥Ö  è·¥è·¥ú Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç  ô·¥ú·¥õ·¥õ·¥è…¥.\n\nFORMAT:**\n`[forward bot][buttonurl:https://t.me/url]`\n")
     button = parse_buttons(ask.text.html)
     if not button:
        return await ask.reply("**INVALID BUTTON**")
     await update_configs(user_id, 'button', ask.text.html)
     await ask.reply("**s·¥ú·¥Ñ·¥Ñ·¥áss“ì üÍú∞·¥ú ü ü è  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ‚úÖ**",
             reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="seebutton":
      button = (await get_configs(user_id))['button']
      button = parse_buttons(button, markup=False)
      button.append([InlineKeyboardButton("‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", "settings#button")])
      await query.message.edit_text(
         "**Y·¥è·¥ú Ä C·¥ús·¥õ·¥è·¥ç B·¥ú·¥õ·¥õ·¥è…¥**",
         reply_markup=InlineKeyboardMarkup(button))

  elif type=="deletebutton":
     await update_configs(user_id, 'button', None)
     await query.message.edit_text(
        "**s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ‚úÖ**",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="database":
     buttons = []
     db_uri = (await get_configs(user_id))['db_uri']
     if db_uri is None:
        buttons.append([InlineKeyboardButton('‚úö ·¥Ä·¥Ö·¥Ö ·¥ç·¥è…¥…¢·¥è ·¥Ö ô ·¥ú Ä ü ‚úö', 
                      callback_data="settings#addurl")])
     else:
        buttons.append([InlineKeyboardButton('üëÄ s·¥á·¥á ·¥ú Ä ü', 
                      callback_data="settings#seeurl")])
        buttons[-1].append(InlineKeyboardButton('‚ùå  Ä·¥á·¥ç·¥è·¥†·¥á ·¥ú Ä ü ‚ùå', 
                      callback_data="settings#deleteurl"))
     buttons.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 
                      callback_data="settings#main")])
     await query.message.edit_text(
        "<b><u>D·¥Ä·¥õ·¥Ä ôs·¥á</u>\n\n·¥Ö·¥Ä·¥õ·¥Ä ô·¥ÄÍú±·¥á …™Íú±  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö Íú∞·¥è Ä Íú±·¥õ·¥è Ä…™…¥…¢  è·¥è·¥ú Ä ·¥Ö·¥ú·¥ò ü…™·¥Ñ·¥Ä·¥õ·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ ü è. ·¥è·¥õ ú·¥á Ä·¥°…™Íú±·¥á, Íú±·¥õ·¥è Ä·¥á·¥Ö ·¥Ö·¥ú·¥ò ü…™·¥Ñ·¥Ä·¥õ·¥á ·¥ç·¥á·¥Ö…™·¥Ä ·¥ç·¥Ä è ·¥Ö…™Íú±·¥Ä·¥ò·¥ò·¥á·¥Ä Ä ·¥ÄÍú∞·¥õ·¥á Ä ·¥Ä  ô·¥è·¥õ  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ.</b>",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="addurl":
     await query.message.delete()
     uri = await bot.ask(user_id, "<b>·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö  è·¥è·¥ú Ä ·¥ç·¥è…¥…¢·¥è ·¥Ö ô ·¥ú Ä ü.</b>\n\n<i>…¢·¥á·¥õ  è·¥è·¥ú Ä ·¥ú Ä ü Íú∞ Ä·¥è·¥ç MangoDb](https://mongodb.com)</i>", disable_web_page_preview=True)
     if uri.text=="/cancel":
        return await uri.reply_text(
                  "<b>process canceled !</b>",
                  reply_markup=InlineKeyboardMarkup(buttons))
     if not uri.text.startswith("mongodb+srv://") and not uri.text.endswith("majority"):
        return await uri.reply("<b>‚ö†Ô∏è I…¥·¥†·¥Ä ü…™·¥Ö M·¥è…¥…¢·¥èDB U Ä ü ‚ö†Ô∏è</b>",
                   reply_markup=InlineKeyboardMarkup(buttons))
     connect, udb = await connect_user_db(user_id, uri.text, "test")
     if connect:
        await udb.drop_all()
        await udb.close()
     else:
        return await uri.reply("<b>‚ö†Ô∏è I…¥·¥†·¥Ä ü…™·¥Ö M·¥è…¥…¢·¥èDB ·¥ú Ä ü, ·¥Ñ·¥Ä…¥'·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ ·¥°…™·¥õ ú ·¥õ ú…™s ·¥ú Ä ü ‚ö†Ô∏è</b>",
                  reply_markup=InlineKeyboardMarkup(buttons))
     await update_configs(user_id, 'db_uri', uri.text)
     await uri.reply("**s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á ·¥ú Ä ü ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ‚úÖ**",
             reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="seeurl":
     db_uri = (await get_configs(user_id))['db_uri']
     await query.answer(f"DATABASE URL: {db_uri}", show_alert=True)

  elif type=="deleteurl":
     await update_configs(user_id, 'db_uri', None)
     await query.message.edit_text(
        "**s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á ·¥ú Ä ü ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ‚úÖ**",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type=="filters":
     await query.message.edit_text(
        "<b><u>üí† C·¥ús·¥õ·¥è·¥ç F…™ ü·¥õ·¥á Äs üí†</b></u>\n\n**·¥Ñ·¥è…¥Íú∞…™…¢·¥ú Ä·¥á ·¥õ ú·¥á ·¥õ è·¥ò·¥á ·¥èÍú∞ ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö**",
        reply_markup=await filters_buttons(user_id))

  elif type=="nextfilters":
     await query.edit_message_reply_markup( 
        reply_markup=await next_filters_buttons(user_id))

  elif type.startswith("updatefilter"):
     i, key, value = type.split('-')
     if value=="True":
        await update_configs(user_id, key, False)
     else:
        await update_configs(user_id, key, True)
     if key in ['poll', 'protect', 'voice', 'animation', 'sticker', 'duplicate']:
        return await query.edit_message_reply_markup(
           reply_markup=await next_filters_buttons(user_id)) 
     await query.edit_message_reply_markup(
        reply_markup=await filters_buttons(user_id))

  elif type.startswith("file_size"):
    settings = await get_configs(user_id)
    size = settings.get('min_size', 0)
    await query.message.edit_text(
       f'<b><u>SIZE LIMIT</b></u><b>\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥õ Íú∞…™ ü·¥á ·¥ç·¥Äx…™·¥ç·¥ú·¥ç s…™·¥¢·¥á  ü…™·¥ç…™·¥õ ·¥õ·¥è Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö\n\nÍú∞…™ ü·¥ás ·¥°…™·¥õ ú …¢ Ä·¥á·¥Ä·¥õ·¥á Ä ·¥õ ú·¥Ä…¥ `{size} MB` will forward</b>',
       reply_markup=size_button(size))
     
  elif type.startswith("maxfile_size"):
    settings = await get_configs(user_id)
    size = settings.get('max_size', 0)
    await query.message.edit_text(
       f'<b><u>Max SIZE LIMIT</b></u><b>\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥õ Íú∞…™ ü·¥á ·¥ç·¥Äx…™·¥ç·¥ú·¥ç s…™·¥¢·¥á  ü…™·¥ç…™·¥õ ·¥õ·¥è Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö\n\nÍú∞…™ ü·¥áÍú± ·¥°…™·¥õ ú  ü·¥áss ·¥õ ú·¥Ä…¥ `{size} MB` will forward</b>',
       reply_markup=maxsize_button(size))

  elif type.startswith("update_size"):
    size = int(query.data.split('-')[1])
    if 0 < size > 4000:
      return await query.answer("size limit exceeded", show_alert=True)
    await update_configs(user_id, 'min_size', size)
    i, limit = size_limit((await get_configs(user_id))['size_limit'])
    await query.message.edit_text(
       f'<b><u>SIZE LIMIT</b></u><b>\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥õ Íú∞…™ ü·¥á ·¥ç·¥Äx…™·¥ç·¥ú·¥ç s…™·¥¢·¥á  ü…™·¥ç…™·¥õ ·¥õ·¥è Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö\n\nÍú∞…™ ü·¥ás ·¥°…™·¥õ ú …¢ Ä·¥á·¥Ä·¥õ·¥á Ä ·¥õ ú·¥Ä…¥ {size} MB` will forward</b>',
       reply_markup=size_button(size))
     
  elif type.startswith("maxupdate_size"):
    size = int(query.data.split('-')[1])
    if 0 < size > 4000:
      return await query.answer("size limit exceeded", show_alert=True)
    await update_configs(user_id, 'max_size', size)
    i, limit = size_limit((await get_configs(user_id))['size_limit'])
    await query.message.edit_text(
       f'<b><u>Max SIZE LIMIT</b></u><b>\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥õ Íú∞…™ ü·¥á ·¥ç·¥Äx…™·¥ç·¥ú·¥ç s…™·¥¢·¥á  ü…™·¥ç…™·¥õ ·¥õ·¥è Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö\n\nÍú∞…™ ü·¥áÍú± ·¥°…™·¥õ ú  ü·¥áss ·¥õ ú·¥Ä…¥ `{size} MB` will forward</b>',
       reply_markup=maxsize_button(size))

  elif type.startswith('update_limit'):
    i, limit, size = type.split('-')
    limit, sts = size_limit(limit)
    await update_configs(user_id, 'size_limit', limit) 
    await query.message.edit_text(
       f'<b><u>SIZE LIMIT</b></u><b>\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥õ “ì…™ ü·¥á s…™·¥¢·¥á  ü…™·¥ç…™·¥õ ·¥õ·¥è Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö\n\nS·¥õ·¥Ä·¥õ·¥ús: files with {sts} `{size} MB` will forward</b>',
       reply_markup=size_button(int(size)))

  elif type == "add_extension":
    await query.message.delete() 
    ext = await bot.ask(user_id, text="**·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö  è·¥è·¥ú Ä ·¥áx·¥õ·¥á…¥s…™·¥è…¥s (seperete by space)**")
    if ext.text == '/cancel':
       return await ext.reply_text(
                  "<b>process canceled</b>",
                  reply_markup=InlineKeyboardMarkup(buttons))
    extensions = ext.text.split(" ")
    extension = (await get_configs(user_id))['extension']
    if extension:
        for extn in extensions:
            extension.append(extn)
    else:
        extension = extensions
    await update_configs(user_id, 'extension', extension)
    buttons = []
    buttons.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 
                      callback_data="settings#get_extension")])
    await ext.reply_text(
        f"**successfully updated**",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type == "get_extension":
    extensions = (await get_configs(user_id))['extension']
    btn = []
    text = ""
    if extensions:
       text += "**üïπ Ex·¥õ·¥á…¥s…™·¥è…¥s**"
       for ext in extensions:
          text += f"\n<code>-{ext}</code>"
    else:
       text += "**N·¥è Ex·¥õ·¥á…¥s…™·¥è…¥s H·¥á Ä·¥á**"
    btn.append([InlineKeyboardButton('‚úö ·¥Ä·¥Ö·¥Ö ‚úö', 'settings#add_extension')])
    btn.append([InlineKeyboardButton('üóëÔ∏è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ü ü üóëÔ∏è', 'settings#rmve_all_extension')])
    btn.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 'settings#extra')])
    await query.message.edit_text(
        text=f"<b><u>·¥á Ex·¥õ·¥á…¥s…™·¥è…¥s</u></b>\n\n**Íú∞…™ ü·¥áÍú± ·¥°…™·¥õ ú ·¥õ ú·¥áÍú±·¥á ·¥áx·¥õ·¥á…¥Íú±…™·¥è…¥Íú± ·¥°…™ ü ü …¥·¥è·¥õ  ô·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö.**\n\n{text}",
        reply_markup=InlineKeyboardMarkup(btn))

  elif type == "rmve_all_extension":
    await update_configs(user_id, 'extension', None)
    buttons = []
    buttons.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 
                      callback_data="settings#get_extension")])
    await query.message.edit_text(text="**s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ‚úÖ**",
                                   reply_markup=InlineKeyboardMarkup(buttons))
  elif type == "add_keyword":
    await query.message.delete()
    ask = await bot.ask(user_id, text="**·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö ·¥õ ú·¥á ·¥ã·¥á è·¥°·¥è Ä·¥Ös  ü…™·¥ã·¥á :- (English 1080p Hdrip)**")
    if ask.text == '/cancel':
       return await ask.reply_text(
                  "<b>process canceled</b>",
                  reply_markup=InlineKeyboardMarkup(buttons))
    keywords = ask.text.split(" ")
    keyword = (await get_configs(user_id))['keywords']
    if keyword:
        for word in keywords:
            keyword.append(word)
    else:
        keyword = keywords
    await update_configs(user_id, 'keywords', keyword)
    buttons = []
    buttons.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 
                      callback_data="settings#get_keyword")])
    await ask.reply_text(
        f"**successfully updated**",
        reply_markup=InlineKeyboardMarkup(buttons))

  elif type == "get_keyword":
    keywords = (await get_configs(user_id))['keywords']
    btn = []
    text = ""
    if keywords:
       text += "**üîñ K·¥á è·¥°·¥è Ä·¥Ös:**"
       for key in keywords:
          text += f"\n<code>-{key}</code>"
    else:
       text += "** è·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥Ä·¥Ö·¥Ö ·¥Ä…¥ è ·¥ã·¥á è·¥°·¥è Ä·¥ÖÍú±.**"
    btn.append([InlineKeyboardButton('‚úö ·¥Ä·¥Ö·¥Ö ‚úö', 'settings#add_keyword')])
    btn.append([InlineKeyboardButton('üóëÔ∏è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ü ü üóëÔ∏è', 'settings#rmve_all_keyword')])
    btn.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 'settings#extra')])
    await query.message.edit_text(
        text=f"<b><u>K·¥á è·¥°·¥è Ä·¥Ös</u></b>Íú∞…™ ü·¥áÍú± ·¥°…™·¥õ ú ·¥õ ú·¥ás·¥á ·¥ã·¥á è·¥°·¥è Ä·¥Ös …™…¥ Íú∞…™ ü·¥á …¥·¥Ä·¥ç·¥á ·¥è…¥ ü è ·¥õ·¥è ·¥ç·¥á ·¥Ä Ä·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö**\n\n{text}",
        reply_markup=InlineKeyboardMarkup(btn))

  elif type == "rmve_all_keyword":
    await update_configs(user_id, 'keywords', None)
    buttons = []
    buttons.append([InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢', 
                      callback_data="settings#get_keyword")])
    await query.message.edit_text(text="**s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä ü ü ·¥ã·¥á è·¥°·¥è Ä·¥Ös ‚úÖ**",
                                   reply_markup=InlineKeyboardMarkup(buttons))
  elif type.startswith("alert"):
    alert = type.split('_')[1]
    await query.answer(alert, show_alert=True)

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

def extra_buttons():
   buttons = [[
       InlineKeyboardButton('üíæ M…™…¥ S…™·¥¢·¥á L…™·¥ç…™·¥õ',
                    callback_data=f'settings#file_size')
       ],[
       InlineKeyboardButton('üíæ M·¥Äx S…™·¥¢·¥á L…™·¥ç…™·¥õ',
                    callback_data=f'settings#maxfile_size ')
       ],[
       InlineKeyboardButton('üö• K·¥á è·¥°·¥è Ä·¥Ös',
                    callback_data=f'settings#get_keyword'),
       InlineKeyboardButton('üïπ Ex·¥õ·¥á…¥s…™·¥è…¥s',
                    callback_data=f'settings#get_extension')
       ],[
       InlineKeyboardButton('‚´∑ B·¥Ä·¥Ñ·¥ã',
                    callback_data=f'settings#main')
       ]]
   return InlineKeyboardMarkup(buttons)

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

def main_buttons():
  buttons = [[
       InlineKeyboardButton('ü§ñ B·¥è·¥õs',
                    callback_data=f'settings#bots'),
       InlineKeyboardButton('üè∑ C ú·¥Ä…¥…¥·¥á üs',
                    callback_data=f'settings#channels')
       ],[
       InlineKeyboardButton('üñãÔ∏è C·¥Ä·¥ò·¥õ…™·¥è…¥',
                    callback_data=f'settings#caption'),
       InlineKeyboardButton('‚èπ B·¥ú·¥õ·¥õ·¥è…¥',
                    callback_data=f'settings#button')
       ],[
       InlineKeyboardButton('üïµ‚Äç‚ôÄ F…™ ü·¥õ·¥á Äs üïµ‚Äç‚ôÄ',
                    callback_data=f'settings#filters'),
       InlineKeyboardButton('üóÉ M·¥è…¥…¢·¥èDB',
                    callback_data=f'settings#database')
       ],[
       InlineKeyboardButton('Ex·¥õ Ä·¥Ä S·¥á·¥õ·¥õ…™…¥…¢s üß™',
                    callback_data=f'settings#extra')
       ],[
       InlineKeyboardButton('‚´∑ B·¥Ä·¥Ñ·¥ã',
                    callback_data=f'help')
       ]]
  return InlineKeyboardMarkup(buttons)

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

def size_limit(limit):
   if str(limit) == "None":
      return None, ""
   elif str(limit) == "True":
      return True, "more than"
   else:
      return False, "less than"

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

def extract_btn(datas):
    i = 0
    btn = []
    if datas:
       for data in datas:
         if i >= 3:
            i = 0
         if i == 0:
            btn.append([InlineKeyboardButton(data, f'settings#alert_{data}')])
            i += 1
            continue
         elif i > 0:
            btn[-1].append(InlineKeyboardButton(data, f'settings#alert_{data}'))
            i += 1
    return btn 

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

def maxsize_button(size):
  buttons = [[
       InlineKeyboardButton('üíæ Max Size Limit',
                    callback_data=f'noth')
       ],[
       InlineKeyboardButton('+1',
                    callback_data=f'settings#maxupdate_size-{size + 1}'),
       InlineKeyboardButton('-1',
                    callback_data=f'settings#maxupdate_size_-{size - 1}')
       ],[
       InlineKeyboardButton('+5',
                    callback_data=f'settings#maxupdate_size-{size + 5}'),
       InlineKeyboardButton('-5',
                    callback_data=f'settings#maxupdate_size_-{size - 5}')
       ],[
       InlineKeyboardButton('+10',
                    callback_data=f'settings#maxupdate_size-{size + 10}'),
       InlineKeyboardButton('-10',
                    callback_data=f'settings#maxupdate_size_-{size - 10}')
       ],[
       InlineKeyboardButton('+50',
                    callback_data=f'settings#maxupdate_size-{size + 50}'),
       InlineKeyboardButton('-50',
                    callback_data=f'settings#maxupdate_size_-{size - 50}')
       ],[
       InlineKeyboardButton('+100',
                    callback_data=f'settings#maxupdate_size-{size + 100}'),
       InlineKeyboardButton('-100',
                    callback_data=f'settings#maxupdate_size_-{size - 100}')
       ],[
       InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢',
                    callback_data="settings#extra")
     ]]
  return InlineKeyboardMarkup(buttons)

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

def size_button(size):
  buttons = [[
       InlineKeyboardButton('üíæ Min Size Limit',
                    callback_data=f'noth')
       ],[
       InlineKeyboardButton('+1',
                    callback_data=f'settings#update_size-{size + 1}'),
       InlineKeyboardButton('-1',
                    callback_data=f'settings#update_size_-{size - 1}')
       ],[
       InlineKeyboardButton('+5',
                    callback_data=f'settings#update_size-{size + 5}'),
       InlineKeyboardButton('-5',
                    callback_data=f'settings#update_size_-{size - 5}')
       ],[
       InlineKeyboardButton('+10',
                    callback_data=f'settings#update_size-{size + 10}'),
       InlineKeyboardButton('-10',
                    callback_data=f'settings#update_size_-{size - 10}')
       ],[
       InlineKeyboardButton('+50',
                    callback_data=f'settings#update_size-{size + 50}'),
       InlineKeyboardButton('-50',
                    callback_data=f'settings#update_size_-{size - 50}')
       ],[
       InlineKeyboardButton('+100',
                    callback_data=f'settings#update_size-{size + 100}'),
       InlineKeyboardButton('-100',
                    callback_data=f'settings#update_size_-{size - 100}')
       ],[
       InlineKeyboardButton('‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢',
                    callback_data="settings#extra")
     ]]
  return InlineKeyboardMarkup(buttons)

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

async def filters_buttons(user_id):
  filter = await get_configs(user_id)
  filters = filter['filters']
  buttons = [[
       InlineKeyboardButton('üè∑Ô∏è F·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ·¥Ä…¢',
                    callback_data=f'settings_#updatefilter-forward_tag-{filter["forward_tag"]}'),
       InlineKeyboardButton('‚úÖ' if filter['forward_tag'] else '‚ùå',
                    callback_data=f'settings#updatefilter-forward_tag-{filter["forward_tag"]}')
       ],[
       InlineKeyboardButton('üñçÔ∏è T·¥áx·¥õs',
                    callback_data=f'settings_#updatefilter-text-{filters["text"]}'),
       InlineKeyboardButton('‚úÖ' if filters['text'] else '‚ùå',
                    callback_data=f'settings#updatefilter-text-{filters["text"]}')
       ],[
       InlineKeyboardButton('üìÅ D·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õs',
                    callback_data=f'settings_#updatefilter-document-{filters["document"]}'),
       InlineKeyboardButton('‚úÖ' if filters['document'] else '‚ùå',
                    callback_data=f'settings#updatefilter-document-{filters["document"]}')
       ],[
       InlineKeyboardButton('üéûÔ∏è V…™·¥Ö·¥á·¥ès',
                    callback_data=f'settings_#updatefilter-video-{filters["video"]}'),
       InlineKeyboardButton('‚úÖ' if filters['video'] else '‚ùå',
                    callback_data=f'settings#updatefilter-video-{filters["video"]}')
       ],[
       InlineKeyboardButton('üì∑ P ú·¥è·¥õ·¥ès',
                    callback_data=f'settings_#updatefilter-photo-{filters["photo"]}'),
       InlineKeyboardButton('‚úÖ' if filters['photo'] else '‚ùå',
                    callback_data=f'settings#updatefilter-photo-{filters["photo"]}')
       ],[
       InlineKeyboardButton('üéß A·¥ú·¥Ö…™·¥ès',
                    callback_data=f'settings_#updatefilter-audio-{filters["audio"]}'),
       InlineKeyboardButton('‚úÖ' if filters['audio'] else '‚ùå',
                    callback_data=f'settings#updatefilter-audio-{filters["audio"]}')
       ],[
       InlineKeyboardButton('‚´∑  ô·¥Ä·¥Ñ·¥ã',
                    callback_data="settings#main"),
       InlineKeyboardButton('…¥·¥áx·¥õ ‚´∏',
                    callback_data="settings#nextfilters")
       ]]
  return InlineKeyboardMarkup(buttons) 

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01

async def next_filters_buttons(user_id):
  filter = await get_configs(user_id)
  filters = filter['filters']
  buttons = [[
       ],[
       InlineKeyboardButton('üé§ V·¥è…™·¥Ñ·¥ás',
                    callback_data=f'settings_#updatefilter-voice-{filters["voice"]}'),
       InlineKeyboardButton('‚úÖ' if filters['voice'] else '‚ùå',
                    callback_data=f'settings#updatefilter-voice-{filters["voice"]}')
       ],[
       InlineKeyboardButton('üé≠ A…¥…™·¥ç·¥Ä·¥õ…™·¥è…¥s',
                    callback_data=f'settings_#updatefilter-animation-{filters["animation"]}'),
       InlineKeyboardButton('‚úÖ' if filters['animation'] else '‚ùå',
                    callback_data=f'settings#updatefilter-animation-{filters["animation"]}')
       ],[
       InlineKeyboardButton('üÉè S·¥õ…™·¥Ñ·¥ã·¥á Äs',
                    callback_data=f'settings_#updatefilter-sticker-{filters["sticker"]}'),
       InlineKeyboardButton('‚úÖ' if filters['sticker'] else '‚ùå',
                    callback_data=f'settings#updatefilter-sticker-{filters["sticker"]}')
       ],[
       InlineKeyboardButton('‚ñ∂Ô∏è S·¥ã…™·¥ò ·¥Ö·¥ú·¥ò ü…™·¥Ñ·¥Ä·¥õ·¥á',
                    callback_data=f'settings_#updatefilter-duplicate-{filter["duplicate"]}'),
       InlineKeyboardButton('‚úÖ' if filter['duplicate'] else '‚ùå',
                    callback_data=f'settings#updatefilter-duplicate-{filter["duplicate"]}')
       ],[
       InlineKeyboardButton('üìä P·¥è ü ü',
                    callback_data=f'settings_#updatefilter-poll-{filters["poll"]}'),
       InlineKeyboardButton('‚úÖ' if filters['poll'] else '‚ùå',
                    callback_data=f'settings#updatefilter-poll-{filters["poll"]}')
       ],[
       InlineKeyboardButton('üîí S·¥á·¥Ñ·¥ú Ä·¥á ·¥ç·¥áss·¥Ä…¢·¥á',
                    callback_data=f'settings_#updatefilter-protect-{filter["protect"]}'),
       InlineKeyboardButton('‚úÖ' if filter['protect'] else '‚ùå',
                    callback_data=f'settings#updatefilter-protect-{filter["protect"]}')
       ],[
       InlineKeyboardButton('‚´∑  ô·¥Ä·¥Ñ·¥ã', 
                    callback_data="settings#filters"),
       InlineKeyboardButton(' ú·¥è·¥ç·¥á üè†',
                    callback_data="settings#main")
       ]]
  return InlineKeyboardMarkup(buttons) 

# Don't Remove Credit Tg - @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot https://youtube.com/@Tech_VJ
# Ask Doubt on telegram @KingVJ01
